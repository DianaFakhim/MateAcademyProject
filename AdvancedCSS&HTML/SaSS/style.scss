// using variable in scss will help to avoid unecessery calc() in code that will happen on browsers side
// like in this case it is mirroring original css and just replacing variables with actual values
//calc(var(--cell-size - var(--player-size)) / 2;  calc() method used within browser as example 

$cell-size: 100px;
$player-size: 0.8 * $cell-size;
$base-shift: ($cell-size - $player-size) / 2;
$col-count: 3;
$row-count: 3;

//use functions to perform calculations

@function getShift($base, $size, $index) {
  @return $base + ($index - 1) * $size;
}

// mixin used to store same values that can be re used similar to function 
  // use @include keywork to use mixin

@mixin square($size) {
  width: $size;
  height: $size;
}

@mixin circle($size) {
  width: $size;
  height: $size;
  border-radius: 50%;
}

//placeholders used when we don't want to duplicate css code as this example instead of 
// duplicating styles using @mixin in css we use %placeholder (keyword @extend), it also shortens time uploading page in browser

%large-text {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 24px;
  line-height: 1.5;
}

.title {
  @extend %large-text; //placeholder
  padding: 0;

    
  //@media example in scss
  @media (min-width: 300px) {
    background-color: yellow;
 }
  @media (min-width: 500px) {
    background-color: yellowgreen;
 }
}

.game {
  position: relative;
  width: 3 * $cell-size;
  border: 2px solid #000;

  .game__field {
    @extend %large-text;
    display: flex;
    flex-wrap: wrap;
  }
  //add '&' instead of typing '.game' 
   &__cell {
    /* border box is inluding padding and border */
    box-sizing: border-box;
    border: 1px dashed #000;
    @include square($cell-size);
  }
   &__player {
    position: absolute;
    left: $base-shift;
    top: $base-shift;
    background-color: #000;
    @include circle($player-size);


    //use loop for  many repeated elements

    @for $index from 1 through $col-count {
      &--col--#{$index} {
        left: getShift($base-shift, $cell-size, $index); 
    }
  }
    @for $index from 1 through $row-count {
      &--row--#{$index} {
        top: getShift($base-shift, $cell-size, $index);
    }
  }
  
    // &--col-1 {
    //   left: $base-shift;
    // }
    // &--col-2 {
    //   left: ($cell-size + $base-shift);
    // }
    // &--col-3 {
    //   left: (2 * $cell-size + $base-shift);
    // }
    
    // &--row-1 {
    //   top: $base-shift;
    // }
    
    // &--row-2 {
    //   top: ($cell-size + $base-shift);
    // }
    
    // &--row-3 {
    //   top: (2 * $cell-size + $base-shift); 
    // }

    //use each loop to go through collections

    $colors:
      'red'  #f00,
      'green' #0f0,
      'blue' #00f;

    @each $name, $color in $colors {
      &--color--#{$name} {
        background-color: $color;
      }
    }
    
    // &--color--red {
    //   background-color: red;
    // }
    
    // &--color--green {
    //   background-color: green;
    // }
    
    // &--color--blue {
    //   background-color: blue;
    // }
  }
}


