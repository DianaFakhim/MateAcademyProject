Basics terminal commands.Git

If you use Windows, some commands may not work for you:

use help instead of man
and start instead of open
stdin (standard input) – це інформація, що вводиться в термінал за допомогою клавіатури або пристрою введення.

stdout (standard output) – це інформація, що виводиться після запуску процесу.

stderr (standard error) – це повідомлення про помилку, яке виводиться, коли процес виявляється невдалим.

ls - команда, яка виводить список (скорочено від list) файлів та папок того каталогу, в якому ви знаходитеся.
Параметр -a змінює поведінку команди ls, аби вона показувала файли та каталоги, які починаються з крапки (.). Файли, які починаються крапкою – приховані і не відображаються під час використання лише ls. Параметри змінюють поведінку команд. Тут ми використовували ls -a для більш детального відображення вмісту робочого каталогу.

Окрім -a, команда ls має ще кілька параметрів. Ось три поширені варіанти:

-a – перераховує весь вміст, включаючи приховані файли та каталоги.
-l - перераховує весь вміст каталогу у довгому форматі.
-t - порядок файлів і каталогів за часом їх останньої зміни.
ls -alt

pwd означає “print working directory”. Команда виводить назву каталогу, в якому ви зараз перебуваєте, який також називається робочим каталогом.

Разом з ls команда pwd потрібна для того, аби показати, де ви перебуваєте у файловій системі.

$ pwd 
/home/roman/PycharmProjects/command_line

cd означає “change directory”. Так само як ви клікнете по папці в Windows або macOS, cd переведе вас у вказаний каталог. Іншими словами, cd змінює робочий каталог.

$ cd client

Щоб перейти безпосередньо до каталогу, використовуйте cd зі шляхом до каталогу як аргументом. Тут команда cd js/builds переходить безпосередньо до каталогу js/builds.

$ cd js/builds

Щоб переміститися на один каталог вгору, використовуйте:

$ cd ..

Щоб перейти вгору та до іншої папки, використовуйте:

$ cd ../next_folder

Команда mkdir означає “make directory”. Вона приймає ім’я каталогу як аргумент, а потім створює новий каталог у поточному робочому каталозі.

$ mkdir media

Команда touch створює новий файл всередині робочого каталогу. Вона приймає ім’я файлу як аргумент, а потім створює порожній файл у поточному робочому каталозі.

$ touch keyboard.txt

Підсумок:

pwd виводить назву поточного робочого каталогу.

ls перераховує всі файли та каталоги в робочому каталозі.

cd переведе вас у вказаний вами каталог.

mkdir створює новий каталог у робочому каталозі.

touch створює новий файл у робочому каталозі.

Команда cp копіює файли або каталоги. Тут ми копіюємо вміст frida.txt в lincoln.txt.

cp frida.txt lincoln.txt

Команда mv переміщує файли. За своїм використанням вона схожа на cp.

mv superman.txt superhero/

Щоб перейменувати файл, використовуйте mv зі старим файлом як першим аргументом і новим файлом як другим аргументом. Переміщуючи файл batman.txt у spiderman.txt, ми перейменуємо файл у spiderman.txt.

mv batman.txt spiderman.txt

Команда rm видаляє файли та каталоги. Тут ми видаляємо файл waterboy.txt з файлової системи.

rm waterboy.txt

-r – це параметр, який змінює поведінку команди rm. -r означає “recursive”, і він використовується для видалення каталогу та всіх його дочірніх каталогів.

rm -r comedy

Підсумки: Параметри, які змінюють поведінку команд:

ls -a перераховує весь вміст каталогу, включаючи приховані файли та каталоги
ls -l перераховує весь вміст у довгому форматі
ls -t впорядковує файли та каталоги на момент їх останньої зміни
кілька параметрів можна використовувати разом, наприклад ls -alt
З командного рядка ви також можете копіювати, переміщувати та видаляти файли та каталоги:

cp копіює файли
mv переміщує та перейменовує файли
rm видаляє файли
rm -r видаляє каталоги
Як працює перенаправлення?
$ sudo docker-compose up > log.txt

Команда > перенаправляє стандартний вивід у файл.

$ cat log.txt | grep GET

Команда cat виводить вміст файлу в термінал.

Cередовище
Кожного разу, коли ми запускаємо програму Термінал, він створює новий сеанс. Сеанс негайно завантажує налаштування та параметри, які утворюють середовище командного рядка.

Ми можемо налаштувати середовище для підтримки команд і програм, які ми створюємо. Це дає змогу нам налаштовувати привітання та псевдоніми команд, а також створювати змінні для спільного використання командами та програмами.

nano – текстовий редактор командного рядка. Він працює так само як текстовий редактор на робочому столі, наприклад TextEdit або Блокнот, за винятком того, що він доступний з командного рядка і приймає лише введення з клавіатури.
$ nano hello.txt

Команда nano hello.txt відкриває новий текстовий файл з іменем hello.txt у текстовому редакторі nano.
Меню команд клавіатури в нижній частині вікна дає змогу нам зберегти зміни в hello.txt і вийти з nano. ^ позначає клавішу Ctrl.
Ctrl + O зберігає файл. ‘О’ означає вивід.
Ctrl + X виходить з програми nano. ‘X’ означає вихід.
Ctrl + G відкриває меню довідки.
clear очищає вікно терміналу, переміщуючи командний рядок у верхню частину екрана.
Bash Profile
Ви створили файл у nano під назвою ~/.bash_profile і додали привітання. Як це працює?

$ nano ~/.bash_profile

~/.bash_profile – це ім'я файлу, який використовується для зберігання налаштувань середовища. Його зазвичай називають “bash profile”. Коли сеанс починається, він завантажить вміст профілю bash перед виконанням команд.

~ представляє домашній каталог користувача.

. вказує на прихований файл. Ім'я ~/.bash_profile є важливим, оскільки саме так командний рядок розпізнає профіль bash.
Команда nano ~/.bash_profile відкриває ~/.bash_profile у nano.
Текст echo "Welcome, Jane Doe" створює привітання в профілі bash, яке зберігається. Він повідомляє командному рядку відтворювати рядок "Welcome, Jane Doe", коли починається сеанс в Терміналі.
Команда source ~/.bash_profile активує зміни в ~/.bash_profile для поточного сеансу. Замість того, щоб закривати термінал і починати новий сеанс, джерело робить зміни доступними відразу в сеансі, в якому ми перебуваємо.

HOME
Що відбувається, коли ви вводите цю команду?

$ echo $HOME

Змінна HOME – це змінна середовища, яка показує шлях до домашнього каталогу. Тут, набравши echo $HOME, термінал показує path/home/ccuser як вихід.

PATH
Що відбувається, коли ви вводите цю команду?

$ echo $PATH
/home/ccuser/.gem/ruby/2.0.0/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin

PATH – це змінна середовища, яка зберігає список каталогів, розділених двокрапкою. Зверніть увагу, echo $PATH перераховує такі каталоги:

/home/ccuser/.gem/ruby/2.0.0/bin
/usr/local/sbin
/usr/local/bin
/usr/bin
/usr/sbin
/sbin
/bin
Кожен каталог містить сценарії для виконання командного рядка. Змінна PATH просто перераховує, які скрипти містяться в каталогах.

Наприклад, багато команд, які ми вивчили, є сценаріями, які зберігаються в каталозі /bin.

/bin/pwd

Це сценарій, який виконується, коли ви вводите команду pwd.

/bin/ls

Це сценарій, який виконується, коли ви вводите команду ls.

У складних випадках ви можете налаштувати змінну PATH під час додавання власних сценаріїв.

У оболонках у стилі Linux це ~/.bashrc, а в macOS це ~/.bash_profile.